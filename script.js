// Fonctionnalit√© 1 :
// On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer (portant le tag <footer>), tu vas afficher le mot "clique" en console.
// Cette fonctionnalit√© doit √™tre cod√©e avec un addEventListener("click", function(){ } car c'est une bonne habitude √† prendre ! üòá

function footerClick() {
  let count = 0;
  let footerSelect = document.querySelector("footer");
  footerSelect.addEventListener("click", footerClickDisplay);  
  function footerClickDisplay() {
    count += 1;
    console.log("clique num√©ro " + count);
  }
}
footerClick();

// Fonctionnalit√© 2 :
// On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus. C'est quoi un "hamburger menu" ? C'est √ßa, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.
// Tu vas faire que si quelqu'un clique sur ce bouton, l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse. Une fois que √ßa, √ßa marche, fait que si on clique √† nouveau dessus, la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id navbarHeader

function hamburgerMenu(){
  let hamburger = document.querySelector(".navbar-toggler");
  hamburger.addEventListener("click", hamburgerMenuDisplay);
  function hamburgerMenuDisplay() {
    hamburgerCollapse = document.querySelector("#navbarHeader");
    console.log(hamburgerCollapse.classList.toggle("collapse"));
  }
}
hamburgerMenu();

// Fonctionnalit√© 3 :
// √Ä pr√©sent, on va faire cela : si on clique sur le bouton "Edit" de la premi√®re card, le texte de la card va se mettre en rouge de fa√ßon irr√©versible (sauf si on recharge la page). √Ä toi de jouer !

function card1EditRed() {
  let card1ButtonEdit = document.querySelector(".btn-group").children[1];
  card1ButtonEdit.addEventListener("click", editRed)
  function editRed() {
    card1 = document.querySelector(".card-text");
    card1.style.color = "red";
  }
}
card1EditRed();

// Fonctionnalit√© 4 :
// On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe : si on clique sur le bouton "Edit" de la deuxi√®me card, le texte de la card va se mettre en vert. Si on re-clique dessus, il redevient comme avant ! Tu l'as compris, il va falloir que tu cherches comment faire un "toggle" sur le style du texte. C'est plus compliqu√© que sur une classe.

function card2EditGreen() {
  let card2ButtonEdit = document.querySelectorAll(".btn-group")[1].children[1];
  card2ButtonEdit.addEventListener("click", editGreen);
  function editGreen() {
    card2 = document.querySelectorAll(".card-text")[1];
    if (card2.style.color == "") {
      card2.style.color = "green";
    } else if (card2.style.color == "green") {
        card2.style.color = "";
    } 
  }
}
card2EditGreen();

// Fonctionnalit√© 5 :
// Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher : si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS. Si possible, rends cette fonctionnalit√© r√©versible (un nouveau double-clic fait tout revenir √† la normale).
function nuclearAttack() {
  let navbar = document.querySelector(".navbar");
  navbar.addEventListener("dblclick", bodyDisappear);
  let body = document.body;
  body.addEventListener("click", bodyAppear);

  function bodyDisappear() {
    linkCDN = document.querySelector("link");
      if (linkCDN.href !== "") {
        linkCDN.href = "";
      }
  }

  function bodyAppear() {
    linkCDN = document.querySelector("link");
    linkCDN.href = "https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css";
  }
}
nuclearAttack();

// Fonctionnalit√© 6 :
// T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! On va commencer √† corser les choses.
// La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur le bouton "View" d'une card (n'importe laquelle), 
// celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra qu'√† 20 % de sa taille d'origine 
// et les boutons "Edit" / "View" restent visibles. Cette fonction sera r√©versible : s'il repasse sa souris, 
// la card redevient normale !

function viewReduce() {

  // Lignes ci-dessous permettent d'ajouter un style css my-new-class √† mon document HTML. Et me permet de d√©finir ce style
  const styleElement = document.createElement('style');
  const css = `
  .size-null {
    font-size: 0px;
  }
  .img-twenty {
    width: 20%;
  }
  `;

  styleElement.textContent = css;
  document.head.appendChild(styleElement);

  let viewEditButtons = document.querySelectorAll(".btn-group");
  for (let card = 0; card <= viewEditButtons.length-1; card++) {
    viewEditButtons[card].firstElementChild.addEventListener('mouseover', cardReduce);

    function cardReduce() {
      let cardTextToUpdate = document.querySelectorAll(".card-text")[card];
      cardTextToUpdate.classList.toggle("size-null");
      let cardImgToUpdate = document.querySelectorAll("img")[card];
      console.log(cardImgToUpdate);
      cardImgToUpdate.classList.toggle("img-twenty");
    }
  }
}
viewReduce();

// Fonctionnalit√© 7 :
// Allez on va rajouter un peu de WTF dans la page : si un utilisateur clique sur le bouton gris ==>, la derni√®re card (en bas √† droite) va passer en premier (en haut √† gauche). On va pouvoir faire tourner les cards !

function moveCardSix() {
  let changeCard = document.querySelector(".btn-secondary");
  changeCard.addEventListener("click", rollCard);
  function rollCard() {
    console.log(changeCard);
    let cardSix = document.querySelectorAll(".col-md-4")[5];
    let cardOne = document.querySelectorAll(".col-md-4")[0];
    let row = document.querySelectorAll(".row")[1];
    row.insertBefore(cardSix, cardOne);
  }
}
moveCardSix() 

// Fonctionnalit√© 8 :
// √âvidemment tu t'y attendais : on va faire tourner les card dans l'autre sens aussi. Donc si un utilisateur clique sur le bouton bleu <==, la premi√®re card devra passer en dernier. √Ä premi√®re vue, tu te dis que si tu as r√©ussi √† faire la fonctionnalit√© pr√©c√©dente, celle-ci c'est du gateau... sauf qu'il y a quelques pi√®ges. üòà
function moveCardOne() {
  let changeCardReverse = document.querySelector(".btn-primary");
  changeCardReverse.addEventListener("click", rollBackCard);
  function rollBackCard(e) {
    e.preventDefault();
    let cardOne = document.querySelectorAll(".col-md-4")[0];
    let row = document.querySelectorAll(".row")[1];
    row.appendChild(cardOne);
  }
}
moveCardOne();

// Fonctionnalit√© 9 :
// La fonctionnalit√© se d√©clenchera si le logo de la page (JS & Events) est s√©lectionn√© et qu'on appuie sur une touche sp√©cifique du clavier.
// Si l'utilisateur presse la touche "a", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† gauche de l'√©cran.
// Si l'utilisateur presse la touche "y", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap au milieu de l'√©cran.
// Si l'utilisateur presse la touche "p", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† droite de l'√©cran.
// Si l'utilisateur presse la touche "b", tout redevient normal.

function eventLogo() {
  let logo = document.querySelector("strong");

  logo.addEventListener("mouseover", function() {
    document.addEventListener("keypress", modifyPage);
    let body = document.body;
    function modifyPage(e) {
      let name = e.key;
      if (/[ayp]/.exec(name)) {
        console.log("passe ici");
        body.classList = "";
      }
      if (name === "a") {
        body.classList.toggle("col-4");
      } else if (name === "y") {
        body.classList.toggle("offset-md-4");
      } else if (name === "p") {
        body.classList.toggle("offset-md-8");
      } else if (name === "b") {
        body.classList = "";
      }
    }
  })
}
eventLogo();